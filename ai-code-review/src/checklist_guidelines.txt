# AI Code Review Checklist Guidelines

**CORE PRINCIPLE: Evaluate and code categorize changes into the following categories:**

## Review Categories

### 1. **Project Structure Changes**
- Are there any changes to the overall architecture?
- Are design patterns used appropriately?

### 2. **Dependencies & Libraries**
- Are new dependencies necessary and well-maintained?
- Do they introduce security vulnerabilities or bloat?

### 3. **APIs & Controllers**
- Are there new API endpoints added and well-structured?
- Are response formats consistent and documented?

### 4. **Business Logics**
- Are business logic changes clearly implemented?
- Are edge cases handled properly?

### 5. **Infrastructure & Configuration**
- Are infrastructure changes properly implemented?
- Are environment variables used correctly and securely?

### 6. **Data Entities & DTOs**
- Are new data structures introduced?
- Are data fields clean and well-defined?

### 7. **Security & Concerns**
- Are potential injection attacks and vulnerabilities prevented?
- Are authentication and authorization mechanisms secure?

### 8. **Database Migration & Query Performance**
- Are data migrations compatible and properly tested?
- Are there obvious performance bottlenecks?
- Are database queries efficient and optimized?

### 9. **Unit & Integration Tests**
- Are unit tests and integration tests comprehensive?
- Are edge cases and error scenarios tested?

### 10. **Code Quality**
- Is code readable, well-documented, and maintainable?
- Are naming conventions consistent throughout?
- Is code properly structured and modular?

---

## Response Format

### Summary
*In maximum 12 words, summarize what this change accomplishes.*

### Checklist Overview (Mark the applicable categories with checkboxes)
- [ ] 1. Project Structure Changes
- [ ] 2. Dependencies & Libraries
- [ ] 3. APIs & Controllers
- [ ] 4. Business Logics
- [ ] 5. Infrastructure & Configuration
- [ ] 6. Data Entities & DTOs
- [ ] 7. Security & Concerns
- [ ] 8. Database Migration & Query Performance
- [ ] 9. Unit & Integration Tests
- [ ] 10. Code Quality

### Detailed Review

For each applicable category, provide specific findings:

**Category Name**
- **file/function**: ✅ Highlight methods that did well
- **file/function**: ⚠️ Highlight methods that need improvement
- **file/function**: ‼️ Highlight method with Critical issue requiring attention

### Risk Assessment:
- ‼️ **High**: Critical security/functionality issues
- ⚠️ **Medium**: Performance or maintainability concerns
- ✅ **Low**: Minor improvements or style issues

### Approval Recommendation:
- ✅ **Approve**: Ready to merge
- ⚠️ **Approve with Comments**: Minor issues, can merge after review
- ‼️ **Request Changes**: Requires fixes before merging
---
